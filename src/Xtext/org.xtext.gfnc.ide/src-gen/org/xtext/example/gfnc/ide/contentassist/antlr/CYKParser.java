/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.gfnc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.gfnc.ide.contentassist.antlr.internal.InternalCYKParser;
import org.xtext.example.gfnc.services.CYKGrammarAccess;

public class CYKParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CYKGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CYKGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getLambdaAccess().getAlternatives(), "rule__Lambda__Alternatives");
			builder.put(grammarAccess.getRightAccess().getAlternatives(), "rule__Right__Alternatives");
			builder.put(grammarAccess.getSimpleAccess().getTerminalsAlternatives_1_0(), "rule__Simple__TerminalsAlternatives_1_0");
			builder.put(grammarAccess.getNonTerminalAccess().getNoTerminalsAlternatives_1_0(), "rule__NonTerminal__NoTerminalsAlternatives_1_0");
			builder.put(grammarAccess.getGFNCAccess().getGroup(), "rule__GFNC__Group__0");
			builder.put(grammarAccess.getInitialAccess().getGroup(), "rule__Initial__Group__0");
			builder.put(grammarAccess.getInitialAccess().getGroup_4(), "rule__Initial__Group_4__0");
			builder.put(grammarAccess.getLambdaAccess().getGroup_0(), "rule__Lambda__Group_0__0");
			builder.put(grammarAccess.getProductionAccess().getGroup(), "rule__Production__Group__0");
			builder.put(grammarAccess.getProductionAccess().getGroup_4(), "rule__Production__Group_4__0");
			builder.put(grammarAccess.getSimpleAccess().getGroup(), "rule__Simple__Group__0");
			builder.put(grammarAccess.getNonTerminalAccess().getGroup(), "rule__NonTerminal__Group__0");
			builder.put(grammarAccess.getBinaryAccess().getGroup(), "rule__Binary__Group__0");
			builder.put(grammarAccess.getGFNCAccess().getWAssignment_0(), "rule__GFNC__WAssignment_0");
			builder.put(grammarAccess.getGFNCAccess().getWAssignment_1(), "rule__GFNC__WAssignment_1");
			builder.put(grammarAccess.getGFNCAccess().getInitAssignment_2(), "rule__GFNC__InitAssignment_2");
			builder.put(grammarAccess.getGFNCAccess().getProductionsAssignment_3(), "rule__GFNC__ProductionsAssignment_3");
			builder.put(grammarAccess.getInitialAccess().getLeftAssignment_1(), "rule__Initial__LeftAssignment_1");
			builder.put(grammarAccess.getInitialAccess().getRightAssignment_3(), "rule__Initial__RightAssignment_3");
			builder.put(grammarAccess.getInitialAccess().getRightAssignment_4_1(), "rule__Initial__RightAssignment_4_1");
			builder.put(grammarAccess.getLambdaAccess().getRightAssignment_0_1(), "rule__Lambda__RightAssignment_0_1");
			builder.put(grammarAccess.getProductionAccess().getLeftAssignment_1(), "rule__Production__LeftAssignment_1");
			builder.put(grammarAccess.getProductionAccess().getRightAssignment_3(), "rule__Production__RightAssignment_3");
			builder.put(grammarAccess.getProductionAccess().getRightAssignment_4_1(), "rule__Production__RightAssignment_4_1");
			builder.put(grammarAccess.getRightAccess().getSimpleAssignment_0(), "rule__Right__SimpleAssignment_0");
			builder.put(grammarAccess.getRightAccess().getBinaryAssignment_1(), "rule__Right__BinaryAssignment_1");
			builder.put(grammarAccess.getSimpleAccess().getTerminalsAssignment_1(), "rule__Simple__TerminalsAssignment_1");
			builder.put(grammarAccess.getNonTerminalAccess().getNoTerminalsAssignment_1(), "rule__NonTerminal__NoTerminalsAssignment_1");
			builder.put(grammarAccess.getBinaryAccess().getFirstAssignment_1(), "rule__Binary__FirstAssignment_1");
			builder.put(grammarAccess.getBinaryAccess().getSecondAssignment_2(), "rule__Binary__SecondAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CYKGrammarAccess grammarAccess;

	@Override
	protected InternalCYKParser createParser() {
		InternalCYKParser result = new InternalCYKParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CYKGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CYKGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
