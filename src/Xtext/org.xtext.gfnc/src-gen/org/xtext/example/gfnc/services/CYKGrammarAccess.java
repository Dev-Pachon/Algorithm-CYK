/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.gfnc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CYKGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GFNCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.GFNC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cWAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cWSimpleParserRuleCall_0_0 = (RuleCall)cWAssignment_0.eContents().get(0);
		private final Assignment cWAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cWSimpleParserRuleCall_1_0 = (RuleCall)cWAssignment_1.eContents().get(0);
		private final Assignment cInitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInitInitialParserRuleCall_2_0 = (RuleCall)cInitAssignment_2.eContents().get(0);
		private final Assignment cProductionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProductionsProductionParserRuleCall_3_0 = (RuleCall)cProductionsAssignment_3.eContents().get(0);
		
		//GFNC:
		//     w += (Simple)(w += Simple)*
		//     init = Initial productions += Production*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//w += (Simple)(w += Simple)*
		//init = Initial productions += Production*
		public Group getGroup() { return cGroup; }
		
		//w += (Simple)
		public Assignment getWAssignment_0() { return cWAssignment_0; }
		
		//(Simple)
		public RuleCall getWSimpleParserRuleCall_0_0() { return cWSimpleParserRuleCall_0_0; }
		
		//(w += Simple)*
		public Assignment getWAssignment_1() { return cWAssignment_1; }
		
		//Simple
		public RuleCall getWSimpleParserRuleCall_1_0() { return cWSimpleParserRuleCall_1_0; }
		
		//init = Initial
		public Assignment getInitAssignment_2() { return cInitAssignment_2; }
		
		//Initial
		public RuleCall getInitInitialParserRuleCall_2_0() { return cInitInitialParserRuleCall_2_0; }
		
		//productions += Production*
		public Assignment getProductionsAssignment_3() { return cProductionsAssignment_3; }
		
		//Production
		public RuleCall getProductionsProductionParserRuleCall_3_0() { return cProductionsProductionParserRuleCall_3_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cLeftSKeyword_1_0 = (Keyword)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightLambdaParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightRightParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		
		//Initial:
		//    {Initial} left = 'S' '->' right += (Lambda)('|' + right += Right)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Initial} left = 'S' '->' right += (Lambda)('|' + right += Right)*
		public Group getGroup() { return cGroup; }
		
		//{Initial}
		public Action getInitialAction_0() { return cInitialAction_0; }
		
		//left = 'S'
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//'S'
		public Keyword getLeftSKeyword_1_0() { return cLeftSKeyword_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//right += (Lambda)
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//(Lambda)
		public RuleCall getRightLambdaParserRuleCall_3_0() { return cRightLambdaParserRuleCall_3_0; }
		
		//('|' + right += Right)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'|' +
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//right += Right
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }
		
		//Right
		public RuleCall getRightRightParserRuleCall_4_1_0() { return cRightRightParserRuleCall_4_1_0; }
	}
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Lambda");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLambdaAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cRightAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cRight_Keyword_0_1_0 = (Keyword)cRightAssignment_0_1.eContents().get(0);
		private final RuleCall cRightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Lambda:
		//    {Lambda} right = '_' | Right
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Lambda} right = '_' | Right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Lambda} right = '_'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Lambda}
		public Action getLambdaAction_0_0() { return cLambdaAction_0_0; }
		
		//right = '_'
		public Assignment getRightAssignment_0_1() { return cRightAssignment_0_1; }
		
		//'_'
		public Keyword getRight_Keyword_0_1_0() { return cRight_Keyword_0_1_0; }
		
		//Right
		public RuleCall getRightParserRuleCall_1() { return cRightParserRuleCall_1; }
	}
	public class ProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Production");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProductionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftNonTerminalParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightRightParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cVerticalLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cRightAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cRightRightParserRuleCall_4_1_0 = (RuleCall)cRightAssignment_4_1.eContents().get(0);
		
		//Production:
		//    {Production} left = NonTerminal '->' right += (Right)('|' + right += Right)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Production} left = NonTerminal '->' right += (Right)('|' + right += Right)*
		public Group getGroup() { return cGroup; }
		
		//{Production}
		public Action getProductionAction_0() { return cProductionAction_0; }
		
		//left = NonTerminal
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//NonTerminal
		public RuleCall getLeftNonTerminalParserRuleCall_1_0() { return cLeftNonTerminalParserRuleCall_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//right += (Right)
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//(Right)
		public RuleCall getRightRightParserRuleCall_3_0() { return cRightRightParserRuleCall_3_0; }
		
		//('|' + right += Right)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'|' +
		public Keyword getVerticalLineKeyword_4_0() { return cVerticalLineKeyword_4_0; }
		
		//right += Right
		public Assignment getRightAssignment_4_1() { return cRightAssignment_4_1; }
		
		//Right
		public RuleCall getRightRightParserRuleCall_4_1_0() { return cRightRightParserRuleCall_4_1_0; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Right");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSimpleAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSimpleSimpleParserRuleCall_0_0 = (RuleCall)cSimpleAssignment_0.eContents().get(0);
		private final Assignment cBinaryAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBinaryBinaryParserRuleCall_1_0 = (RuleCall)cBinaryAssignment_1.eContents().get(0);
		
		//Right:
		//    simple = Simple | binary = Binary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//simple = Simple | binary = Binary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//simple = Simple
		public Assignment getSimpleAssignment_0() { return cSimpleAssignment_0; }
		
		//Simple
		public RuleCall getSimpleSimpleParserRuleCall_0_0() { return cSimpleSimpleParserRuleCall_0_0; }
		
		//binary = Binary
		public Assignment getBinaryAssignment_1() { return cBinaryAssignment_1; }
		
		//Binary
		public RuleCall getBinaryBinaryParserRuleCall_1_0() { return cBinaryBinaryParserRuleCall_1_0; }
	}
	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Simple");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSimpleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTerminalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTerminalsAlternatives_1_0 = (Alternatives)cTerminalsAssignment_1.eContents().get(0);
		private final Keyword cTerminalsAKeyword_1_0_0 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(0);
		private final Keyword cTerminalsBKeyword_1_0_1 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(1);
		private final Keyword cTerminalsCKeyword_1_0_2 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(2);
		private final Keyword cTerminalsDKeyword_1_0_3 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(3);
		private final Keyword cTerminalsEKeyword_1_0_4 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(4);
		private final Keyword cTerminalsFKeyword_1_0_5 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(5);
		private final Keyword cTerminalsGKeyword_1_0_6 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(6);
		private final Keyword cTerminalsHKeyword_1_0_7 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(7);
		private final Keyword cTerminalsIKeyword_1_0_8 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(8);
		private final Keyword cTerminalsJKeyword_1_0_9 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(9);
		private final Keyword cTerminalsKKeyword_1_0_10 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(10);
		private final Keyword cTerminalsLKeyword_1_0_11 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(11);
		private final Keyword cTerminalsMKeyword_1_0_12 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(12);
		private final Keyword cTerminalsNKeyword_1_0_13 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(13);
		private final Keyword cTerminalsOKeyword_1_0_14 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(14);
		private final Keyword cTerminalsPKeyword_1_0_15 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(15);
		private final Keyword cTerminalsQKeyword_1_0_16 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(16);
		private final Keyword cTerminalsRKeyword_1_0_17 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(17);
		private final Keyword cTerminalsSKeyword_1_0_18 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(18);
		private final Keyword cTerminalsTKeyword_1_0_19 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(19);
		private final Keyword cTerminalsVKeyword_1_0_20 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(20);
		private final Keyword cTerminalsWKeyword_1_0_21 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(21);
		private final Keyword cTerminalsXKeyword_1_0_22 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(22);
		private final Keyword cTerminalsYKeyword_1_0_23 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(23);
		private final Keyword cTerminalsZKeyword_1_0_24 = (Keyword)cTerminalsAlternatives_1_0.eContents().get(24);
		
		//Simple:
		//    {Simple} terminals = ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Simple} terminals = ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		public Group getGroup() { return cGroup; }
		
		//{Simple}
		public Action getSimpleAction_0() { return cSimpleAction_0; }
		
		//terminals = ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//   'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		public Assignment getTerminalsAssignment_1() { return cTerminalsAssignment_1; }
		
		//('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//   'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
		public Alternatives getTerminalsAlternatives_1_0() { return cTerminalsAlternatives_1_0; }
		
		//'a'
		public Keyword getTerminalsAKeyword_1_0_0() { return cTerminalsAKeyword_1_0_0; }
		
		//'b'
		public Keyword getTerminalsBKeyword_1_0_1() { return cTerminalsBKeyword_1_0_1; }
		
		//'c'
		public Keyword getTerminalsCKeyword_1_0_2() { return cTerminalsCKeyword_1_0_2; }
		
		//'d'
		public Keyword getTerminalsDKeyword_1_0_3() { return cTerminalsDKeyword_1_0_3; }
		
		//'e'
		public Keyword getTerminalsEKeyword_1_0_4() { return cTerminalsEKeyword_1_0_4; }
		
		//'f'
		public Keyword getTerminalsFKeyword_1_0_5() { return cTerminalsFKeyword_1_0_5; }
		
		//'g'
		public Keyword getTerminalsGKeyword_1_0_6() { return cTerminalsGKeyword_1_0_6; }
		
		//'h'
		public Keyword getTerminalsHKeyword_1_0_7() { return cTerminalsHKeyword_1_0_7; }
		
		//'i'
		public Keyword getTerminalsIKeyword_1_0_8() { return cTerminalsIKeyword_1_0_8; }
		
		//'j'
		public Keyword getTerminalsJKeyword_1_0_9() { return cTerminalsJKeyword_1_0_9; }
		
		//'k'
		public Keyword getTerminalsKKeyword_1_0_10() { return cTerminalsKKeyword_1_0_10; }
		
		//'l'
		public Keyword getTerminalsLKeyword_1_0_11() { return cTerminalsLKeyword_1_0_11; }
		
		//'m'
		public Keyword getTerminalsMKeyword_1_0_12() { return cTerminalsMKeyword_1_0_12; }
		
		//'n'
		public Keyword getTerminalsNKeyword_1_0_13() { return cTerminalsNKeyword_1_0_13; }
		
		//'o'
		public Keyword getTerminalsOKeyword_1_0_14() { return cTerminalsOKeyword_1_0_14; }
		
		//'p'
		public Keyword getTerminalsPKeyword_1_0_15() { return cTerminalsPKeyword_1_0_15; }
		
		//'q'
		public Keyword getTerminalsQKeyword_1_0_16() { return cTerminalsQKeyword_1_0_16; }
		
		//'r'
		public Keyword getTerminalsRKeyword_1_0_17() { return cTerminalsRKeyword_1_0_17; }
		
		//'s'
		public Keyword getTerminalsSKeyword_1_0_18() { return cTerminalsSKeyword_1_0_18; }
		
		//'t'
		public Keyword getTerminalsTKeyword_1_0_19() { return cTerminalsTKeyword_1_0_19; }
		
		//'v'
		public Keyword getTerminalsVKeyword_1_0_20() { return cTerminalsVKeyword_1_0_20; }
		
		//'w'
		public Keyword getTerminalsWKeyword_1_0_21() { return cTerminalsWKeyword_1_0_21; }
		
		//'x'
		public Keyword getTerminalsXKeyword_1_0_22() { return cTerminalsXKeyword_1_0_22; }
		
		//'y'
		public Keyword getTerminalsYKeyword_1_0_23() { return cTerminalsYKeyword_1_0_23; }
		
		//'z'
		public Keyword getTerminalsZKeyword_1_0_24() { return cTerminalsZKeyword_1_0_24; }
	}
	public class NonTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.NonTerminal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNonTerminalAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNoTerminalsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cNoTerminalsAlternatives_1_0 = (Alternatives)cNoTerminalsAssignment_1.eContents().get(0);
		private final Keyword cNoTerminalsAKeyword_1_0_0 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(0);
		private final Keyword cNoTerminalsBKeyword_1_0_1 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(1);
		private final Keyword cNoTerminalsCKeyword_1_0_2 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(2);
		private final Keyword cNoTerminalsDKeyword_1_0_3 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(3);
		private final Keyword cNoTerminalsEKeyword_1_0_4 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(4);
		private final Keyword cNoTerminalsFKeyword_1_0_5 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(5);
		private final Keyword cNoTerminalsGKeyword_1_0_6 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(6);
		private final Keyword cNoTerminalsHKeyword_1_0_7 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(7);
		private final Keyword cNoTerminalsIKeyword_1_0_8 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(8);
		private final Keyword cNoTerminalsJKeyword_1_0_9 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(9);
		private final Keyword cNoTerminalsKKeyword_1_0_10 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(10);
		private final Keyword cNoTerminalsLKeyword_1_0_11 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(11);
		private final Keyword cNoTerminalsMKeyword_1_0_12 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(12);
		private final Keyword cNoTerminalsNKeyword_1_0_13 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(13);
		private final Keyword cNoTerminalsOKeyword_1_0_14 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(14);
		private final Keyword cNoTerminalsPKeyword_1_0_15 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(15);
		private final Keyword cNoTerminalsQKeyword_1_0_16 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(16);
		private final Keyword cNoTerminalsRKeyword_1_0_17 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(17);
		private final Keyword cNoTerminalsTKeyword_1_0_18 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(18);
		private final Keyword cNoTerminalsUKeyword_1_0_19 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(19);
		private final Keyword cNoTerminalsVKeyword_1_0_20 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(20);
		private final Keyword cNoTerminalsWKeyword_1_0_21 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(21);
		private final Keyword cNoTerminalsXKeyword_1_0_22 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(22);
		private final Keyword cNoTerminalsYKeyword_1_0_23 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(23);
		private final Keyword cNoTerminalsZKeyword_1_0_24 = (Keyword)cNoTerminalsAlternatives_1_0.eContents().get(24);
		
		//NonTerminal:
		//    {NonTerminal} noTerminals = ('A'|'B'|'C'| 'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'| 'X'|'Y'|'Z')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{NonTerminal} noTerminals = ('A'|'B'|'C'| 'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'| 'X'|'Y'|'Z')
		public Group getGroup() { return cGroup; }
		
		//{NonTerminal}
		public Action getNonTerminalAction_0() { return cNonTerminalAction_0; }
		
		//noTerminals = ('A'|'B'|'C'| 'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//   'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'| 'X'|'Y'|'Z')
		public Assignment getNoTerminalsAssignment_1() { return cNoTerminalsAssignment_1; }
		
		//('A'|'B'|'C'| 'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//   'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'| 'X'|'Y'|'Z')
		public Alternatives getNoTerminalsAlternatives_1_0() { return cNoTerminalsAlternatives_1_0; }
		
		//'A'
		public Keyword getNoTerminalsAKeyword_1_0_0() { return cNoTerminalsAKeyword_1_0_0; }
		
		//'B'
		public Keyword getNoTerminalsBKeyword_1_0_1() { return cNoTerminalsBKeyword_1_0_1; }
		
		//'C'
		public Keyword getNoTerminalsCKeyword_1_0_2() { return cNoTerminalsCKeyword_1_0_2; }
		
		//'D'
		public Keyword getNoTerminalsDKeyword_1_0_3() { return cNoTerminalsDKeyword_1_0_3; }
		
		//'E'
		public Keyword getNoTerminalsEKeyword_1_0_4() { return cNoTerminalsEKeyword_1_0_4; }
		
		//'F'
		public Keyword getNoTerminalsFKeyword_1_0_5() { return cNoTerminalsFKeyword_1_0_5; }
		
		//'G'
		public Keyword getNoTerminalsGKeyword_1_0_6() { return cNoTerminalsGKeyword_1_0_6; }
		
		//'H'
		public Keyword getNoTerminalsHKeyword_1_0_7() { return cNoTerminalsHKeyword_1_0_7; }
		
		//'I'
		public Keyword getNoTerminalsIKeyword_1_0_8() { return cNoTerminalsIKeyword_1_0_8; }
		
		//'J'
		public Keyword getNoTerminalsJKeyword_1_0_9() { return cNoTerminalsJKeyword_1_0_9; }
		
		//'K'
		public Keyword getNoTerminalsKKeyword_1_0_10() { return cNoTerminalsKKeyword_1_0_10; }
		
		//'L'
		public Keyword getNoTerminalsLKeyword_1_0_11() { return cNoTerminalsLKeyword_1_0_11; }
		
		//'M'
		public Keyword getNoTerminalsMKeyword_1_0_12() { return cNoTerminalsMKeyword_1_0_12; }
		
		//'N'
		public Keyword getNoTerminalsNKeyword_1_0_13() { return cNoTerminalsNKeyword_1_0_13; }
		
		//'O'
		public Keyword getNoTerminalsOKeyword_1_0_14() { return cNoTerminalsOKeyword_1_0_14; }
		
		//'P'
		public Keyword getNoTerminalsPKeyword_1_0_15() { return cNoTerminalsPKeyword_1_0_15; }
		
		//'Q'
		public Keyword getNoTerminalsQKeyword_1_0_16() { return cNoTerminalsQKeyword_1_0_16; }
		
		//'R'
		public Keyword getNoTerminalsRKeyword_1_0_17() { return cNoTerminalsRKeyword_1_0_17; }
		
		//'T'
		public Keyword getNoTerminalsTKeyword_1_0_18() { return cNoTerminalsTKeyword_1_0_18; }
		
		//'U'
		public Keyword getNoTerminalsUKeyword_1_0_19() { return cNoTerminalsUKeyword_1_0_19; }
		
		//'V'
		public Keyword getNoTerminalsVKeyword_1_0_20() { return cNoTerminalsVKeyword_1_0_20; }
		
		//'W'
		public Keyword getNoTerminalsWKeyword_1_0_21() { return cNoTerminalsWKeyword_1_0_21; }
		
		//'X'
		public Keyword getNoTerminalsXKeyword_1_0_22() { return cNoTerminalsXKeyword_1_0_22; }
		
		//'Y'
		public Keyword getNoTerminalsYKeyword_1_0_23() { return cNoTerminalsYKeyword_1_0_23; }
		
		//'Z'
		public Keyword getNoTerminalsZKeyword_1_0_24() { return cNoTerminalsZKeyword_1_0_24; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinaryAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFirstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFirstNonTerminalParserRuleCall_1_0 = (RuleCall)cFirstAssignment_1.eContents().get(0);
		private final Assignment cSecondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSecondNonTerminalParserRuleCall_2_0 = (RuleCall)cSecondAssignment_2.eContents().get(0);
		
		//Binary:
		//    {Binary} (first = NonTerminal)(second = NonTerminal)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Binary} (first = NonTerminal)(second = NonTerminal)
		public Group getGroup() { return cGroup; }
		
		//{Binary}
		public Action getBinaryAction_0() { return cBinaryAction_0; }
		
		//(first = NonTerminal)
		public Assignment getFirstAssignment_1() { return cFirstAssignment_1; }
		
		//NonTerminal
		public RuleCall getFirstNonTerminalParserRuleCall_1_0() { return cFirstNonTerminalParserRuleCall_1_0; }
		
		//(second = NonTerminal)
		public Assignment getSecondAssignment_2() { return cSecondAssignment_2; }
		
		//NonTerminal
		public RuleCall getSecondNonTerminalParserRuleCall_2_0() { return cSecondNonTerminalParserRuleCall_2_0; }
	}
	
	
	private final GFNCElements pGFNC;
	private final InitialElements pInitial;
	private final LambdaElements pLambda;
	private final ProductionElements pProduction;
	private final RightElements pRight;
	private final SimpleElements pSimple;
	private final NonTerminalElements pNonTerminal;
	private final BinaryElements pBinary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CYKGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGFNC = new GFNCElements();
		this.pInitial = new InitialElements();
		this.pLambda = new LambdaElements();
		this.pProduction = new ProductionElements();
		this.pRight = new RightElements();
		this.pSimple = new SimpleElements();
		this.pNonTerminal = new NonTerminalElements();
		this.pBinary = new BinaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.gfnc.CYK".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GFNC:
	//     w += (Simple)(w += Simple)*
	//     init = Initial productions += Production*
	//;
	public GFNCElements getGFNCAccess() {
		return pGFNC;
	}
	
	public ParserRule getGFNCRule() {
		return getGFNCAccess().getRule();
	}
	
	//Initial:
	//    {Initial} left = 'S' '->' right += (Lambda)('|' + right += Right)*
	//;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Lambda:
	//    {Lambda} right = '_' | Right
	//;
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//Production:
	//    {Production} left = NonTerminal '->' right += (Right)('|' + right += Right)*
	//;
	public ProductionElements getProductionAccess() {
		return pProduction;
	}
	
	public ParserRule getProductionRule() {
		return getProductionAccess().getRule();
	}
	
	//Right:
	//    simple = Simple | binary = Binary
	//;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Simple:
	//    {Simple} terminals = ('a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
	//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z')
	//;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}
	
	//NonTerminal:
	//    {NonTerminal} noTerminals = ('A'|'B'|'C'| 'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
	//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'| 'X'|'Y'|'Z')
	//;
	public NonTerminalElements getNonTerminalAccess() {
		return pNonTerminal;
	}
	
	public ParserRule getNonTerminalRule() {
		return getNonTerminalAccess().getRule();
	}
	
	//Binary:
	//    {Binary} (first = NonTerminal)(second = NonTerminal)
	//;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
