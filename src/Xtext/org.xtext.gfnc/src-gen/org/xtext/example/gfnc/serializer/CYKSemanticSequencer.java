/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.gfnc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.gfnc.cYK.Binary;
import org.xtext.example.gfnc.cYK.CYKPackage;
import org.xtext.example.gfnc.cYK.GFNC;
import org.xtext.example.gfnc.cYK.NonTerminal;
import org.xtext.example.gfnc.cYK.Production;
import org.xtext.example.gfnc.cYK.Right;
import org.xtext.example.gfnc.cYK.Terminal;
import org.xtext.example.gfnc.services.CYKGrammarAccess;

@SuppressWarnings("all")
public class CYKSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CYKGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CYKPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CYKPackage.BINARY:
				sequence_Binary(context, (Binary) semanticObject); 
				return; 
			case CYKPackage.GFNC:
				sequence_GFNC(context, (GFNC) semanticObject); 
				return; 
			case CYKPackage.NON_TERMINAL:
				sequence_NonTerminal(context, (NonTerminal) semanticObject); 
				return; 
			case CYKPackage.PRODUCTION:
				sequence_Production(context, (Production) semanticObject); 
				return; 
			case CYKPackage.RIGHT:
				sequence_Right(context, (Right) semanticObject); 
				return; 
			case CYKPackage.TERMINAL:
				sequence_Terminal(context, (Terminal) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Binary returns Binary
	 *
	 * Constraint:
	 *     (first=NonTerminal second=NonTerminal)
	 * </pre>
	 */
	protected void sequence_Binary(ISerializationContext context, Binary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.BINARY__FIRST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.BINARY__FIRST));
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.BINARY__SECOND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.BINARY__SECOND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryAccess().getFirstNonTerminalParserRuleCall_1_0_0(), semanticObject.getFirst());
		feeder.accept(grammarAccess.getBinaryAccess().getSecondNonTerminalParserRuleCall_1_1_0(), semanticObject.getSecond());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GFNC returns GFNC
	 *
	 * Constraint:
	 *     (w+=Terminal w+=Terminal* productions+=Production*)
	 * </pre>
	 */
	protected void sequence_GFNC(ISerializationContext context, GFNC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NonTerminal returns NonTerminal
	 *
	 * Constraint:
	 *     (
	 *         nonTerminals='A' | 
	 *         nonTerminals='B' | 
	 *         nonTerminals='C' | 
	 *         nonTerminals='D' | 
	 *         nonTerminals='E' | 
	 *         nonTerminals='F' | 
	 *         nonTerminals='G' | 
	 *         nonTerminals='H' | 
	 *         nonTerminals='I' | 
	 *         nonTerminals='J' | 
	 *         nonTerminals='K' | 
	 *         nonTerminals='L' | 
	 *         nonTerminals='M' | 
	 *         nonTerminals='N' | 
	 *         nonTerminals='O' | 
	 *         nonTerminals='P' | 
	 *         nonTerminals='Q' | 
	 *         nonTerminals='R' | 
	 *         nonTerminals='S' | 
	 *         nonTerminals='T' | 
	 *         nonTerminals='U' | 
	 *         nonTerminals='V' | 
	 *         nonTerminals='W' | 
	 *         nonTerminals='X' | 
	 *         nonTerminals='Y' | 
	 *         nonTerminals='Z'
	 *     )
	 * </pre>
	 */
	protected void sequence_NonTerminal(ISerializationContext context, NonTerminal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Production returns Production
	 *
	 * Constraint:
	 *     (left=NonTerminal right+=Right right+=Right*)
	 * </pre>
	 */
	protected void sequence_Production(ISerializationContext context, Production semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Right returns Right
	 *
	 * Constraint:
	 *     (simple=Terminal | binary=Binary | lambda='_')
	 * </pre>
	 */
	protected void sequence_Right(ISerializationContext context, Right semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Terminal returns Terminal
	 *
	 * Constraint:
	 *     (
	 *         terminals='a' | 
	 *         terminals='b' | 
	 *         terminals='c' | 
	 *         terminals='d' | 
	 *         terminals='e' | 
	 *         terminals='f' | 
	 *         terminals='g' | 
	 *         terminals='h' | 
	 *         terminals='i' | 
	 *         terminals='j' | 
	 *         terminals='k' | 
	 *         terminals='l' | 
	 *         terminals='m' | 
	 *         terminals='n' | 
	 *         terminals='o' | 
	 *         terminals='p' | 
	 *         terminals='q' | 
	 *         terminals='r' | 
	 *         terminals='s' | 
	 *         terminals='t' | 
	 *         terminals='v' | 
	 *         terminals='w' | 
	 *         terminals='x' | 
	 *         terminals='y' | 
	 *         terminals='z'
	 *     )
	 * </pre>
	 */
	protected void sequence_Terminal(ISerializationContext context, Terminal semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
