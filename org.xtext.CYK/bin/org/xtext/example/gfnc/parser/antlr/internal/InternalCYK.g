/*
 * generated by Xtext 2.26.0
 */
grammar InternalCYK;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.gfnc.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.gfnc.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.gfnc.services.CYKGrammarAccess;

}

@parser::members {

 	private CYKGrammarAccess grammarAccess;

    public InternalCYKParser(TokenStream input, CYKGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "GFNC";
   	}

   	@Override
   	protected CYKGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleGFNC
entryRuleGFNC returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGFNCRule()); }
	iv_ruleGFNC=ruleGFNC
	{ $current=$iv_ruleGFNC.current; }
	EOF;

// Rule GFNC
ruleGFNC returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getGFNCAccess().getInitInitialParserRuleCall_0_0());
				}
				lv_init_0_0=ruleInitial
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGFNCRule());
					}
					set(
						$current,
						"init",
						lv_init_0_0,
						"org.xtext.example.gfnc.CYK.Initial");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getGFNCAccess().getProductionsProductionParserRuleCall_1_0());
				}
				lv_productions_1_0=ruleProduction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getGFNCRule());
					}
					add(
						$current,
						"productions",
						lv_productions_1_0,
						"org.xtext.example.gfnc.CYK.Production");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleInitial
entryRuleInitial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialRule()); }
	iv_ruleInitial=ruleInitial
	{ $current=$iv_ruleInitial.current; }
	EOF;

// Rule Initial
ruleInitial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_left_0_0='S'
				{
					newLeafNode(lv_left_0_0, grammarAccess.getInitialAccess().getLeftSKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialRule());
					}
					setWithLastConsumed($current, "left", lv_left_0_0, "S");
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialAccess().getRightLambdaParserRuleCall_2_0());
				}
				lv_right_2_0=ruleLambda
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialRule());
					}
					add(
						$current,
						"right",
						lv_right_2_0,
						"org.xtext.example.gfnc.CYK.Lambda");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3='|'
				{
					newLeafNode(otherlv_3, grammarAccess.getInitialAccess().getVerticalLineKeyword_3_0());
				}
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getInitialAccess().getRightRightParserRuleCall_3_1_0());
					}
					lv_right_4_0=ruleRight
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInitialRule());
						}
						add(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.gfnc.CYK.Right");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleLambda
entryRuleLambda returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaRule()); }
	iv_ruleLambda=ruleLambda
	{ $current=$iv_ruleLambda.current; }
	EOF;

// Rule Lambda
ruleLambda returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_right_0_0='_'
				{
					newLeafNode(lv_right_0_0, grammarAccess.getLambdaAccess().getRight_Keyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLambdaRule());
					}
					setWithLastConsumed($current, "right", lv_right_0_0, "_");
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getLambdaAccess().getRightParserRuleCall_1());
		}
		this_Right_1=ruleRight
		{
			$current = $this_Right_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleProduction
entryRuleProduction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProductionRule()); }
	iv_ruleProduction=ruleProduction
	{ $current=$iv_ruleProduction.current; }
	EOF;

// Rule Production
ruleProduction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getLeftNonTerminalParserRuleCall_0_0());
				}
				lv_left_0_0=ruleNonTerminal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					set(
						$current,
						"left",
						lv_left_0_0,
						"org.xtext.example.gfnc.CYK.NonTerminal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='->'
		{
			newLeafNode(otherlv_1, grammarAccess.getProductionAccess().getHyphenMinusGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getProductionAccess().getRightRightParserRuleCall_2_0());
				}
				lv_right_2_0=ruleRight
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProductionRule());
					}
					add(
						$current,
						"right",
						lv_right_2_0,
						"org.xtext.example.gfnc.CYK.Right");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_3='|'
				{
					newLeafNode(otherlv_3, grammarAccess.getProductionAccess().getVerticalLineKeyword_3_0());
				}
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getProductionAccess().getRightRightParserRuleCall_3_1_0());
					}
					lv_right_4_0=ruleRight
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProductionRule());
						}
						add(
							$current,
							"right",
							lv_right_4_0,
							"org.xtext.example.gfnc.CYK.Right");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRight
entryRuleRight returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRightRule()); }
	iv_ruleRight=ruleRight
	{ $current=$iv_ruleRight.current; }
	EOF;

// Rule Right
ruleRight returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRightAccess().getSimpleParserRuleCall_0());
		}
		this_Simple_0=ruleSimple
		{
			$current = $this_Simple_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRightAccess().getBinaryParserRuleCall_1());
		}
		this_Binary_1=ruleBinary
		{
			$current = $this_Binary_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSimple
entryRuleSimple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleRule()); }
	iv_ruleSimple=ruleSimple
	{ $current=$iv_ruleSimple.current; }
	EOF;

// Rule Simple
ruleSimple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_alpha_0_0='a'
				{
					newLeafNode(lv_alpha_0_0, grammarAccess.getSimpleAccess().getAlphaAKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSimpleRule());
					}
					setWithLastConsumed($current, "alpha", lv_alpha_0_0, "a");
				}
			)
		)
		    |
		otherlv_1='b'
		{
			newLeafNode(otherlv_1, grammarAccess.getSimpleAccess().getBKeyword_1());
		}
		    |
		otherlv_2='c'
		{
			newLeafNode(otherlv_2, grammarAccess.getSimpleAccess().getCKeyword_2());
		}
		    |
		otherlv_3='d'
		{
			newLeafNode(otherlv_3, grammarAccess.getSimpleAccess().getDKeyword_3());
		}
		    |
		otherlv_4='e'
		{
			newLeafNode(otherlv_4, grammarAccess.getSimpleAccess().getEKeyword_4());
		}
		    |
		otherlv_5='f'
		{
			newLeafNode(otherlv_5, grammarAccess.getSimpleAccess().getFKeyword_5());
		}
		    |
		otherlv_6='g'
		{
			newLeafNode(otherlv_6, grammarAccess.getSimpleAccess().getGKeyword_6());
		}
		    |
		otherlv_7='h'
		{
			newLeafNode(otherlv_7, grammarAccess.getSimpleAccess().getHKeyword_7());
		}
		    |
		otherlv_8='i'
		{
			newLeafNode(otherlv_8, grammarAccess.getSimpleAccess().getIKeyword_8());
		}
		    |
		otherlv_9='j'
		{
			newLeafNode(otherlv_9, grammarAccess.getSimpleAccess().getJKeyword_9());
		}
		    |
		otherlv_10='k'
		{
			newLeafNode(otherlv_10, grammarAccess.getSimpleAccess().getKKeyword_10());
		}
		    |
		otherlv_11='l'
		{
			newLeafNode(otherlv_11, grammarAccess.getSimpleAccess().getLKeyword_11());
		}
		    |
		otherlv_12='m'
		{
			newLeafNode(otherlv_12, grammarAccess.getSimpleAccess().getMKeyword_12());
		}
		    |
		otherlv_13='n'
		{
			newLeafNode(otherlv_13, grammarAccess.getSimpleAccess().getNKeyword_13());
		}
		    |
		otherlv_14='o'
		{
			newLeafNode(otherlv_14, grammarAccess.getSimpleAccess().getOKeyword_14());
		}
		    |
		otherlv_15='p'
		{
			newLeafNode(otherlv_15, grammarAccess.getSimpleAccess().getPKeyword_15());
		}
		    |
		otherlv_16='q'
		{
			newLeafNode(otherlv_16, grammarAccess.getSimpleAccess().getQKeyword_16());
		}
		    |
		otherlv_17='r'
		{
			newLeafNode(otherlv_17, grammarAccess.getSimpleAccess().getRKeyword_17());
		}
		    |
		otherlv_18='s'
		{
			newLeafNode(otherlv_18, grammarAccess.getSimpleAccess().getSKeyword_18());
		}
		    |
		otherlv_19='t'
		{
			newLeafNode(otherlv_19, grammarAccess.getSimpleAccess().getTKeyword_19());
		}
		    |
		otherlv_20='v'
		{
			newLeafNode(otherlv_20, grammarAccess.getSimpleAccess().getVKeyword_20());
		}
		    |
		otherlv_21='w'
		{
			newLeafNode(otherlv_21, grammarAccess.getSimpleAccess().getWKeyword_21());
		}
		    |
		otherlv_22='x'
		{
			newLeafNode(otherlv_22, grammarAccess.getSimpleAccess().getXKeyword_22());
		}
		    |
		otherlv_23='y'
		{
			newLeafNode(otherlv_23, grammarAccess.getSimpleAccess().getYKeyword_23());
		}
		    |
		otherlv_24='z'
		{
			newLeafNode(otherlv_24, grammarAccess.getSimpleAccess().getZKeyword_24());
		}
	)
;

// Entry rule entryRuleNonTerminal
entryRuleNonTerminal returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNonTerminalRule()); }
	iv_ruleNonTerminal=ruleNonTerminal
	{ $current=$iv_ruleNonTerminal.current; }
	EOF;

// Rule NonTerminal
ruleNonTerminal returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_var_0_0='A'
				{
					newLeafNode(lv_var_0_0, grammarAccess.getNonTerminalAccess().getVarAKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNonTerminalRule());
					}
					setWithLastConsumed($current, "var", lv_var_0_0, "A");
				}
			)
		)
		    |
		otherlv_1='B'
		{
			newLeafNode(otherlv_1, grammarAccess.getNonTerminalAccess().getBKeyword_1());
		}
		    |
		otherlv_2='C'
		{
			newLeafNode(otherlv_2, grammarAccess.getNonTerminalAccess().getCKeyword_2());
		}
		    |
		otherlv_3='D'
		{
			newLeafNode(otherlv_3, grammarAccess.getNonTerminalAccess().getDKeyword_3());
		}
		    |
		otherlv_4='E'
		{
			newLeafNode(otherlv_4, grammarAccess.getNonTerminalAccess().getEKeyword_4());
		}
		    |
		otherlv_5='F'
		{
			newLeafNode(otherlv_5, grammarAccess.getNonTerminalAccess().getFKeyword_5());
		}
		    |
		otherlv_6='G'
		{
			newLeafNode(otherlv_6, grammarAccess.getNonTerminalAccess().getGKeyword_6());
		}
		    |
		otherlv_7='H'
		{
			newLeafNode(otherlv_7, grammarAccess.getNonTerminalAccess().getHKeyword_7());
		}
		    |
		otherlv_8='I'
		{
			newLeafNode(otherlv_8, grammarAccess.getNonTerminalAccess().getIKeyword_8());
		}
		    |
		otherlv_9='J'
		{
			newLeafNode(otherlv_9, grammarAccess.getNonTerminalAccess().getJKeyword_9());
		}
		    |
		otherlv_10='K'
		{
			newLeafNode(otherlv_10, grammarAccess.getNonTerminalAccess().getKKeyword_10());
		}
		    |
		otherlv_11='L'
		{
			newLeafNode(otherlv_11, grammarAccess.getNonTerminalAccess().getLKeyword_11());
		}
		    |
		otherlv_12='M'
		{
			newLeafNode(otherlv_12, grammarAccess.getNonTerminalAccess().getMKeyword_12());
		}
		    |
		otherlv_13='N'
		{
			newLeafNode(otherlv_13, grammarAccess.getNonTerminalAccess().getNKeyword_13());
		}
		    |
		otherlv_14='O'
		{
			newLeafNode(otherlv_14, grammarAccess.getNonTerminalAccess().getOKeyword_14());
		}
		    |
		otherlv_15='P'
		{
			newLeafNode(otherlv_15, grammarAccess.getNonTerminalAccess().getPKeyword_15());
		}
		    |
		otherlv_16='Q'
		{
			newLeafNode(otherlv_16, grammarAccess.getNonTerminalAccess().getQKeyword_16());
		}
		    |
		otherlv_17='R'
		{
			newLeafNode(otherlv_17, grammarAccess.getNonTerminalAccess().getRKeyword_17());
		}
		    |
		otherlv_18='T'
		{
			newLeafNode(otherlv_18, grammarAccess.getNonTerminalAccess().getTKeyword_18());
		}
		    |
		otherlv_19='U'
		{
			newLeafNode(otherlv_19, grammarAccess.getNonTerminalAccess().getUKeyword_19());
		}
		    |
		otherlv_20='V'
		{
			newLeafNode(otherlv_20, grammarAccess.getNonTerminalAccess().getVKeyword_20());
		}
		    |
		otherlv_21='W'
		{
			newLeafNode(otherlv_21, grammarAccess.getNonTerminalAccess().getWKeyword_21());
		}
		    |
		otherlv_22='X'
		{
			newLeafNode(otherlv_22, grammarAccess.getNonTerminalAccess().getXKeyword_22());
		}
		    |
		otherlv_23='Y'
		{
			newLeafNode(otherlv_23, grammarAccess.getNonTerminalAccess().getYKeyword_23());
		}
		    |
		otherlv_24='Z'
		{
			newLeafNode(otherlv_24, grammarAccess.getNonTerminalAccess().getZKeyword_24());
		}
	)
;

// Entry rule entryRuleBinary
entryRuleBinary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBinaryRule()); }
	iv_ruleBinary=ruleBinary
	{ $current=$iv_ruleBinary.current; }
	EOF;

// Rule Binary
ruleBinary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryAccess().getFirstNonTerminalParserRuleCall_0_0());
				}
				lv_first_0_0=ruleNonTerminal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryRule());
					}
					set(
						$current,
						"first",
						lv_first_0_0,
						"org.xtext.example.gfnc.CYK.NonTerminal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBinaryAccess().getSecondNonTerminalParserRuleCall_1_0());
				}
				lv_second_1_0=ruleNonTerminal
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBinaryRule());
					}
					set(
						$current,
						"second",
						lv_second_1_0,
						"org.xtext.example.gfnc.CYK.NonTerminal");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
