/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.gfnc.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.gfnc.cYK.Binary;
import org.xtext.example.gfnc.cYK.CYKPackage;
import org.xtext.example.gfnc.cYK.GFNC;
import org.xtext.example.gfnc.cYK.Initial;
import org.xtext.example.gfnc.cYK.Lambda;
import org.xtext.example.gfnc.cYK.NonTerminal;
import org.xtext.example.gfnc.cYK.Production;
import org.xtext.example.gfnc.cYK.Simple;
import org.xtext.example.gfnc.services.CYKGrammarAccess;

@SuppressWarnings("all")
public class CYKSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CYKGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CYKPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CYKPackage.BINARY:
				sequence_Binary(context, (Binary) semanticObject); 
				return; 
			case CYKPackage.GFNC:
				sequence_GFNC(context, (GFNC) semanticObject); 
				return; 
			case CYKPackage.INITIAL:
				sequence_Initial(context, (Initial) semanticObject); 
				return; 
			case CYKPackage.LAMBDA:
				sequence_Lambda(context, (Lambda) semanticObject); 
				return; 
			case CYKPackage.NON_TERMINAL:
				sequence_NonTerminal(context, (NonTerminal) semanticObject); 
				return; 
			case CYKPackage.PRODUCTION:
				sequence_Production(context, (Production) semanticObject); 
				return; 
			case CYKPackage.SIMPLE:
				sequence_Simple(context, (Simple) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lambda returns Binary
	 *     Right returns Binary
	 *     Binary returns Binary
	 *
	 * Constraint:
	 *     (first=NonTerminal second=NonTerminal)
	 * </pre>
	 */
	protected void sequence_Binary(ISerializationContext context, Binary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.BINARY__FIRST) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.BINARY__FIRST));
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.BINARY__SECOND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.BINARY__SECOND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryAccess().getFirstNonTerminalParserRuleCall_0_0(), semanticObject.getFirst());
		feeder.accept(grammarAccess.getBinaryAccess().getSecondNonTerminalParserRuleCall_1_0(), semanticObject.getSecond());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GFNC returns GFNC
	 *
	 * Constraint:
	 *     (init=Initial productions+=Production*)
	 * </pre>
	 */
	protected void sequence_GFNC(ISerializationContext context, GFNC semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Initial returns Initial
	 *
	 * Constraint:
	 *     (left='S' right+=Lambda right+=Right*)
	 * </pre>
	 */
	protected void sequence_Initial(ISerializationContext context, Initial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lambda returns Lambda
	 *
	 * Constraint:
	 *     right='_'
	 * </pre>
	 */
	protected void sequence_Lambda(ISerializationContext context, Lambda semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.LAMBDA__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.LAMBDA__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLambdaAccess().getRight_Keyword_0_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NonTerminal returns NonTerminal
	 *
	 * Constraint:
	 *     var='A'
	 * </pre>
	 */
	protected void sequence_NonTerminal(ISerializationContext context, NonTerminal semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.NON_TERMINAL__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.NON_TERMINAL__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNonTerminalAccess().getVarAKeyword_0_0(), semanticObject.getVar());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Production returns Production
	 *
	 * Constraint:
	 *     (left=NonTerminal right+=Right right+=Right*)
	 * </pre>
	 */
	protected void sequence_Production(ISerializationContext context, Production semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Lambda returns Simple
	 *     Right returns Simple
	 *     Simple returns Simple
	 *
	 * Constraint:
	 *     alpha='a'
	 * </pre>
	 */
	protected void sequence_Simple(ISerializationContext context, Simple semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CYKPackage.Literals.SIMPLE__ALPHA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CYKPackage.Literals.SIMPLE__ALPHA));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSimpleAccess().getAlphaAKeyword_0_0(), semanticObject.getAlpha());
		feeder.finish();
	}
	
	
}
