/*
 * generated by Xtext 2.26.0
 */
package org.xtext.example.gfnc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CYKGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GFNCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.GFNC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInitAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cInitInitialParserRuleCall_0_0 = (RuleCall)cInitAssignment_0.eContents().get(0);
		private final Assignment cProductionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProductionsProductionParserRuleCall_1_0 = (RuleCall)cProductionsAssignment_1.eContents().get(0);
		
		//GFNC:
		//    init = Initial productions += Production*;
		@Override public ParserRule getRule() { return rule; }
		
		//init = Initial productions += Production*
		public Group getGroup() { return cGroup; }
		
		//init = Initial
		public Assignment getInitAssignment_0() { return cInitAssignment_0; }
		
		//Initial
		public RuleCall getInitInitialParserRuleCall_0_0() { return cInitInitialParserRuleCall_0_0; }
		
		//productions += Production*
		public Assignment getProductionsAssignment_1() { return cProductionsAssignment_1; }
		
		//Production
		public RuleCall getProductionsProductionParserRuleCall_1_0() { return cProductionsProductionParserRuleCall_1_0; }
	}
	public class InitialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Initial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cLeftSKeyword_0_0 = (Keyword)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightLambdaParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightRightParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		//Initial:
		//    left = 'S' '->' right += (Lambda)('|' + right += Right)*;
		@Override public ParserRule getRule() { return rule; }
		
		//left = 'S' '->' right += (Lambda)('|' + right += Right)*
		public Group getGroup() { return cGroup; }
		
		//left = 'S'
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//'S'
		public Keyword getLeftSKeyword_0_0() { return cLeftSKeyword_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//right += (Lambda)
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//(Lambda)
		public RuleCall getRightLambdaParserRuleCall_2_0() { return cRightLambdaParserRuleCall_2_0; }
		
		//('|' + right += Right)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|' +
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//right += Right
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//Right
		public RuleCall getRightRightParserRuleCall_3_1_0() { return cRightRightParserRuleCall_3_1_0; }
	}
	public class LambdaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Lambda");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRightAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cRight_Keyword_0_0 = (Keyword)cRightAssignment_0.eContents().get(0);
		private final RuleCall cRightParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Lambda:
		//    right = '_' | Right
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//right = '_' | Right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//right = '_'
		public Assignment getRightAssignment_0() { return cRightAssignment_0; }
		
		//'_'
		public Keyword getRight_Keyword_0_0() { return cRight_Keyword_0_0; }
		
		//Right
		public RuleCall getRightParserRuleCall_1() { return cRightParserRuleCall_1; }
	}
	public class ProductionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Production");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNonTerminalParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightRightParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cVerticalLineKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRightAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRightRightParserRuleCall_3_1_0 = (RuleCall)cRightAssignment_3_1.eContents().get(0);
		
		//Production:
		//    left = NonTerminal '->' right += (Right)('|' + right += Right)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left = NonTerminal '->' right += (Right)('|' + right += Right)*
		public Group getGroup() { return cGroup; }
		
		//left = NonTerminal
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//NonTerminal
		public RuleCall getLeftNonTerminalParserRuleCall_0_0() { return cLeftNonTerminalParserRuleCall_0_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }
		
		//right += (Right)
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//(Right)
		public RuleCall getRightRightParserRuleCall_2_0() { return cRightRightParserRuleCall_2_0; }
		
		//('|' + right += Right)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'|' +
		public Keyword getVerticalLineKeyword_3_0() { return cVerticalLineKeyword_3_0; }
		
		//right += Right
		public Assignment getRightAssignment_3_1() { return cRightAssignment_3_1; }
		
		//Right
		public RuleCall getRightRightParserRuleCall_3_1_0() { return cRightRightParserRuleCall_3_1_0; }
	}
	public class RightElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Right");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Right:
		//    Simple | Binary
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Simple | Binary
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Simple
		public RuleCall getSimpleParserRuleCall_0() { return cSimpleParserRuleCall_0; }
		
		//Binary
		public RuleCall getBinaryParserRuleCall_1() { return cBinaryParserRuleCall_1; }
	}
	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Simple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cAlphaAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cAlphaAKeyword_0_0 = (Keyword)cAlphaAssignment_0.eContents().get(0);
		private final Keyword cBKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cIKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cJKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cKKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cMKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cOKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cPKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cQKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cRKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cSKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cTKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cVKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cWKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cXKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cYKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cZKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		
		//Simple:
		//    alpha = 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//alpha = 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
		//'m'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//alpha = 'a'
		public Assignment getAlphaAssignment_0() { return cAlphaAssignment_0; }
		
		//'a'
		public Keyword getAlphaAKeyword_0_0() { return cAlphaAKeyword_0_0; }
		
		//'b'
		public Keyword getBKeyword_1() { return cBKeyword_1; }
		
		//'c'
		public Keyword getCKeyword_2() { return cCKeyword_2; }
		
		//'d'
		public Keyword getDKeyword_3() { return cDKeyword_3; }
		
		//'e'
		public Keyword getEKeyword_4() { return cEKeyword_4; }
		
		//'f'
		public Keyword getFKeyword_5() { return cFKeyword_5; }
		
		//'g'
		public Keyword getGKeyword_6() { return cGKeyword_6; }
		
		//'h'
		public Keyword getHKeyword_7() { return cHKeyword_7; }
		
		//'i'
		public Keyword getIKeyword_8() { return cIKeyword_8; }
		
		//'j'
		public Keyword getJKeyword_9() { return cJKeyword_9; }
		
		//'k'
		public Keyword getKKeyword_10() { return cKKeyword_10; }
		
		//'l'
		public Keyword getLKeyword_11() { return cLKeyword_11; }
		
		//'m'
		public Keyword getMKeyword_12() { return cMKeyword_12; }
		
		//'n'
		public Keyword getNKeyword_13() { return cNKeyword_13; }
		
		//'o'
		public Keyword getOKeyword_14() { return cOKeyword_14; }
		
		//'p'
		public Keyword getPKeyword_15() { return cPKeyword_15; }
		
		//'q'
		public Keyword getQKeyword_16() { return cQKeyword_16; }
		
		//'r'
		public Keyword getRKeyword_17() { return cRKeyword_17; }
		
		//'s'
		public Keyword getSKeyword_18() { return cSKeyword_18; }
		
		//'t'
		public Keyword getTKeyword_19() { return cTKeyword_19; }
		
		//'v'
		public Keyword getVKeyword_20() { return cVKeyword_20; }
		
		//'w'
		public Keyword getWKeyword_21() { return cWKeyword_21; }
		
		//'x'
		public Keyword getXKeyword_22() { return cXKeyword_22; }
		
		//'y'
		public Keyword getYKeyword_23() { return cYKeyword_23; }
		
		//'z'
		public Keyword getZKeyword_24() { return cZKeyword_24; }
	}
	public class NonTerminalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.NonTerminal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cVarAKeyword_0_0 = (Keyword)cVarAssignment_0.eContents().get(0);
		private final Keyword cBKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cCKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cFKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cGKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cHKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cIKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cJKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cKKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cLKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cMKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cNKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cOKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cPKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cQKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cRKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cTKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cUKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cVKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cWKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cXKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cYKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cZKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		
		//NonTerminal:
		//    var = 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
		//'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var = 'A'
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//'A'
		public Keyword getVarAKeyword_0_0() { return cVarAKeyword_0_0; }
		
		//'B'
		public Keyword getBKeyword_1() { return cBKeyword_1; }
		
		//'C'
		public Keyword getCKeyword_2() { return cCKeyword_2; }
		
		//'D'
		public Keyword getDKeyword_3() { return cDKeyword_3; }
		
		//'E'
		public Keyword getEKeyword_4() { return cEKeyword_4; }
		
		//'F'
		public Keyword getFKeyword_5() { return cFKeyword_5; }
		
		//'G'
		public Keyword getGKeyword_6() { return cGKeyword_6; }
		
		//'H'
		public Keyword getHKeyword_7() { return cHKeyword_7; }
		
		//'I'
		public Keyword getIKeyword_8() { return cIKeyword_8; }
		
		//'J'
		public Keyword getJKeyword_9() { return cJKeyword_9; }
		
		//'K'
		public Keyword getKKeyword_10() { return cKKeyword_10; }
		
		//'L'
		public Keyword getLKeyword_11() { return cLKeyword_11; }
		
		//'M'
		public Keyword getMKeyword_12() { return cMKeyword_12; }
		
		//'N'
		public Keyword getNKeyword_13() { return cNKeyword_13; }
		
		//'O'
		public Keyword getOKeyword_14() { return cOKeyword_14; }
		
		//'P'
		public Keyword getPKeyword_15() { return cPKeyword_15; }
		
		//'Q'
		public Keyword getQKeyword_16() { return cQKeyword_16; }
		
		//'R'
		public Keyword getRKeyword_17() { return cRKeyword_17; }
		
		//'T'
		public Keyword getTKeyword_18() { return cTKeyword_18; }
		
		//'U'
		public Keyword getUKeyword_19() { return cUKeyword_19; }
		
		//'V'
		public Keyword getVKeyword_20() { return cVKeyword_20; }
		
		//'W'
		public Keyword getWKeyword_21() { return cWKeyword_21; }
		
		//'X'
		public Keyword getXKeyword_22() { return cXKeyword_22; }
		
		//'Y'
		public Keyword getYKeyword_23() { return cYKeyword_23; }
		
		//'Z'
		public Keyword getZKeyword_24() { return cZKeyword_24; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.gfnc.CYK.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstNonTerminalParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Assignment cSecondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSecondNonTerminalParserRuleCall_1_0 = (RuleCall)cSecondAssignment_1.eContents().get(0);
		
		//Binary:
		//    first = NonTerminal second = NonTerminal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//first = NonTerminal second = NonTerminal
		public Group getGroup() { return cGroup; }
		
		//first = NonTerminal
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }
		
		//NonTerminal
		public RuleCall getFirstNonTerminalParserRuleCall_0_0() { return cFirstNonTerminalParserRuleCall_0_0; }
		
		//second = NonTerminal
		public Assignment getSecondAssignment_1() { return cSecondAssignment_1; }
		
		//NonTerminal
		public RuleCall getSecondNonTerminalParserRuleCall_1_0() { return cSecondNonTerminalParserRuleCall_1_0; }
	}
	
	
	private final GFNCElements pGFNC;
	private final InitialElements pInitial;
	private final LambdaElements pLambda;
	private final ProductionElements pProduction;
	private final RightElements pRight;
	private final SimpleElements pSimple;
	private final NonTerminalElements pNonTerminal;
	private final BinaryElements pBinary;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CYKGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGFNC = new GFNCElements();
		this.pInitial = new InitialElements();
		this.pLambda = new LambdaElements();
		this.pProduction = new ProductionElements();
		this.pRight = new RightElements();
		this.pSimple = new SimpleElements();
		this.pNonTerminal = new NonTerminalElements();
		this.pBinary = new BinaryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.gfnc.CYK".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//GFNC:
	//    init = Initial productions += Production*;
	public GFNCElements getGFNCAccess() {
		return pGFNC;
	}
	
	public ParserRule getGFNCRule() {
		return getGFNCAccess().getRule();
	}
	
	//Initial:
	//    left = 'S' '->' right += (Lambda)('|' + right += Right)*;
	public InitialElements getInitialAccess() {
		return pInitial;
	}
	
	public ParserRule getInitialRule() {
		return getInitialAccess().getRule();
	}
	
	//Lambda:
	//    right = '_' | Right
	//;
	public LambdaElements getLambdaAccess() {
		return pLambda;
	}
	
	public ParserRule getLambdaRule() {
		return getLambdaAccess().getRule();
	}
	
	//Production:
	//    left = NonTerminal '->' right += (Right)('|' + right += Right)*
	//;
	public ProductionElements getProductionAccess() {
		return pProduction;
	}
	
	public ParserRule getProductionRule() {
		return getProductionAccess().getRule();
	}
	
	//Right:
	//    Simple | Binary
	//;
	public RightElements getRightAccess() {
		return pRight;
	}
	
	public ParserRule getRightRule() {
		return getRightAccess().getRule();
	}
	
	//Simple:
	//    alpha = 'a'|'b'|'c'|'d'|'e'|'f'|'g'|'h'|'i'|'j'|'k'|'l'|
	//    'm'|'n'|'o'|'p'|'q'|'r'|'s'|'t'|'v'|'w'|'x'|'y'|'z'
	//;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}
	
	//NonTerminal:
	//    var = 'A'|'B'|'C'|'D'|'E'|'F'|'G'|'H'|'I'|'J'|'K'|'L'|
	//    'M'|'N'|'O'|'P'|'Q'|'R'|'T'|'U'|'V'|'W'|'X'|'Y'|'Z'
	//;
	public NonTerminalElements getNonTerminalAccess() {
		return pNonTerminal;
	}
	
	public ParserRule getNonTerminalRule() {
		return getNonTerminalAccess().getRule();
	}
	
	//Binary:
	//    first = NonTerminal second = NonTerminal
	//;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
